---
import { getCollection } from "astro:content";

// Layout import â€” provides basic page elements: <head>, <nav>, <footer> etc.
import BaseLayout from "../layouts/BaseLayout.astro";

// Component Imports
import CallToAction from "../components/CallToAction.astro";
import Grid from "../components/Grid.astro";
import Hero from "../components/Hero.astro";
import Icon from "../components/Icon.astro";
import Pill from "../components/Pill.astro";
import PortfolioPreview from "../components/PortfolioPreview.astro";

// Page section components
import Skills from "../components/Skills.astro";
import QuickLink from "../components/QuickLink.astro";

// Content Fetching: List four most recent sprints projects
const sprints = (await getCollection("sprint")).sort(
  (a, b) => a.data.publishDate.valueOf() - b.data.publishDate.valueOf()
);

const learningOutcomes = (await getCollection("learning-outcome")).sort(
  (a, b) => Number(a.data.LO.slice(2)) - Number(b.data.LO.slice(2))
);
const researchQuestions = (await getCollection("research-question")).sort(
  (a, b) => Number(a.data.title.slice(2)) - Number(b.data.title.slice(2))
);

---

<BaseLayout>
  <div class="stack gap-20 lg:gap-48">
    <div class="wrapper stack gap-8 lg:gap-20">
      <header class="hero">
        <Hero
          title="Hello, my name is Daniel Vaswani"
          tagline="I am a Fullstack Developer & UX/UI Designer who is currently based in Eindhoven."
          align="start"
        />

        <!-- <img
					alt=""
					width="480"
					height="620"
					src="/assets/portrait.jpg"
				/> -->
      </header>

      
    </div>


      <QuickLink
        title="Research Questions"
        links={researchQuestions.map((lo) => ({
          title: lo.data.question,
          to: `research-questions/${lo.data.title.slice(2)}`,
        }))}
        longTitle
      />

    <main class="wrapper stack gap-20 lg:gap-48">
      <section class="section with-background with-cta">
        <header class="section-header stack gap-2 lg:gap-4">
          <h3>Sprints</h3>
          <p>Every sprint has a different Theme, Scope & Learning Outcomes.</p>
        </header>

        <div class="gallery">
          <Grid variant="offset">
            {
              sprints.map((sprint) => (
                <li>
                  <PortfolioPreview project={sprint} />
                </li>
              ))
            }
          </Grid>
        </div>
      </section>

      

      <QuickLink
        title="Learning Outcomes"
        links={learningOutcomes.map((lo) => ({
          title: lo.data.title,
          subtitle: lo.data.LO,
          to: `learning-outcome/${lo.data.title
            .toLowerCase()
            .split(" ")
            .join("-")}`,
        }))}
      />

    </main>
  </div>
</BaseLayout>

<style is:global>
  .hero {
    display: flex;
    flex-direction: column;
    align-items: center;
    gap: 2rem;
  }

  .roles {
    display: none;
  }

  .hero img {
    aspect-ratio: 5 / 4;
    object-fit: cover;
    object-position: top;
    border-radius: 1.5rem;
    box-shadow: var(--shadow-md);
  }

  @media (min-width: 50em) {
    .hero {
      display: grid;
      grid-template-columns: 6fr 4fr;
      padding-inline: 2.5rem;
      gap: 3.75rem;
    }

    .roles {
      margin-top: 0.5rem;
      display: flex;
      gap: 0.5rem;
    }

    .hero img {
      aspect-ratio: 3 / 4;
      border-radius: 4.5rem;
      object-fit: cover;
    }
  }

  /* ====================================================== */

  .section {
    display: grid;
    gap: 2rem;
  }

  .with-background {
    position: relative;
  }

  .with-background::before {
    --hero-bg: var(--bg-image-subtle-2);

    content: "";
    position: absolute;
    pointer-events: none;
    left: 50%;
    width: 100vw;
    aspect-ratio: calc(2.25 / var(--bg-scale));
    top: 0;
    transform: translateY(-75%) translateX(-50%);
    background: url("/assets/backgrounds/noise.png") top center/220px repeat,
      var(--hero-bg) center center / var(--bg-gradient-size) no-repeat,
      var(--gray-999);
    background-blend-mode: overlay, normal, normal, normal;
    mix-blend-mode: var(--bg-blend-mode);
    z-index: -1;
  }

  .with-background.bg-variant::before {
    --hero-bg: var(--bg-image-subtle-1);
  }

  .section-header {
    justify-self: center;
    text-align: center;
    max-width: 50ch;
    font-size: var(--text-md);
    color: var(--gray-300);
  }

  .section-header h3 {
    font-size: var(--text-2xl);
  }

  @media (min-width: 50em) {
    .section {
      grid-template-columns: repeat(4, 1fr);
      grid-template-areas: "header header header header" "gallery gallery gallery gallery";
      gap: 5rem;
    }

    .section.with-cta {
      grid-template-areas: "header header header cta" "gallery gallery gallery gallery";
    }

    .section-header {
      grid-area: header;
      font-size: var(--text-lg);
    }

    .section-header h3 {
      font-size: var(--text-4xl);
    }

    .with-cta .section-header {
      justify-self: flex-start;
      text-align: left;
    }

    .gallery {
      grid-area: gallery;
    }

    .cta {
      grid-area: cta;
    }
  }
</style>
